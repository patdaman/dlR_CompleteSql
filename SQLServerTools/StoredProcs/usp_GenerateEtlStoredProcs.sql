-- =============================================
-- Author:		Patrick de los Reyes
-- Create date: 2015-08-10
-- Description:	Create stored procedure to import 
--				 ETL data from user view to table 
--				 while not overwriting user changes
-- =============================================
CREATE PROCEDURE [dbo].[usp_GenerateEtlStoredProcs] 
	@TABLE_NAME				sysname = 'Table_Name'
	, @TABLE_SCHEMA			sysname = 'dbo'
	, @PARENT_TABLE_NAME	sysname = 'vi_ETL'
	, @PARENT_TABLE_SCHEMA	sysname = 'dbo'
	, @USER_NAME			sysname = '{Domain}\%'
	, @FlagForReview		tinyint = 0
	, @KEY_INPUT			sysname = ''
	, @PrintOnly			bit = 1
AS
BEGIN

DECLARE @KEY_COLUMN VARCHAR(100) = ''
DECLARE @KEY_STATEMENT VARCHAR(200) = ''
DECLARE @KEY_SELECT VARCHAR(200) = ''
DECLARE @KEY_INSERT VARCHAR(200) = ''
DECLARE @KEY_VALUES VARCHAR(200) = ''
DECLARE @KEY_JOIN VARCHAR(200) = ''
DECLARE @KEY_VARS VARCHAR(200) = ''
DECLARE @KEY_FIRST_VAR VARCHAR(50) = ''
DECLARE @KEY_VARS_DECLARE VARCHAR(200) = ''
DECLARE @KEY_CHECK VARCHAR(200) = ''
DECLARE @COLUMNPRECISION TINYINT
DECLARE @COLUMNSCALE TINYINT
DECLARE @COLUMNNULLABLE VARCHAR(10) = ''
DECLARE @COLUMNLENGTH SMALLINT
DECLARE @COLUMN_NAME sysname
DECLARE @COLUMNTYPE VARCHAR(128) = ''
DECLARE @SQL VARCHAR(MAX) = ''
DECLARE @SQL_HEADER VARCHAR(MAX) = ''
DECLARE @SQL_FOOTER VARCHAR(MAX) = ''
DECLARE @SQL_UPDATE VARCHAR(MAX) = ''
DECLARE @SQL_INSERT_COLUMNS VARCHAR(MAX) = ''
DECLARE @SQL_INSERT_VALUES VARCHAR(MAX) = ''
DECLARE @USERNAME VARCHAR(100) = ''
DECLARE @CRLF VARCHAR(2) = CHAR(13) + CHAR(10)

SET @SQL_UPDATE = COALESCE(@SQL_UPDATE, ' ')

DECLARE TABLECOLUMNS CURSOR FOR

SELECT KCU.COLUMN_NAME, C.DATA_TYPE, C.CHARACTER_MAXIMUM_LENGTH, C.IS_NULLABLE, C.NUMERIC_PRECISION, C.NUMERIC_SCALE
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ON KCU.CONSTRAINT_SCHEMA = TC.CONSTRAINT_SCHEMA
	JOIN INFORMATION_SCHEMA.COLUMNS C ON KCU.COLUMN_NAME = C.COLUMN_NAME
		AND KCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
		AND KCU.TABLE_SCHEMA = TC.TABLE_SCHEMA
		AND KCU.TABLE_NAME = TC.TABLE_NAME
WHERE TC.CONSTRAINT_TYPE IN ('PRIMARY KEY','UNIQUE')
	AND KCU.TABLE_NAME LIKE @TABLE_NAME
	AND C.TABLE_NAME LIKE @TABLE_NAME
	AND COLUMNPROPERTY(OBJECT_ID(@TABLE_NAME),c.COLUMN_NAME,'isidentity')<>1
ORDER BY C.ORDINAL_POSITION

OPEN TABLECOLUMNS
		
	FETCH NEXT FROM TABLECOLUMNS
	INTO @KEY_COLUMN, @COLUMNTYPE, @COLUMNLENGTH, @COLUMNNULLABLE, @COLUMNPRECISION, @COLUMNSCALE
		
	WHILE @@FETCH_STATUS = 0
	BEGIN --> 3
		IF (@COLUMNTYPE <> 'TEXT' AND @COLUMNTYPE <> 'NTEXT' AND @COLUMNTYPE <> 'IMAGE' AND @COLUMNTYPE <> 'TIMESTAMP')
		BEGIN --> 4
		
			SELECT @KEY_STATEMENT = @KEY_STATEMENT + '[' + @KEY_COLUMN + '] [' + @COLUMNTYPE + ']'
				, @KEY_VARS_DECLARE = @KEY_VARS_DECLARE + ' @' + @KEY_COLUMN + ' ' + @COLUMNTYPE
				, @KEY_SELECT = @KEY_SELECT + '[' + @KEY_COLUMN + '], '
				, @KEY_INSERT = @KEY_INSERT + 'A.[' + @KEY_COLUMN + '], '
				, @KEY_VALUES = @KEY_VALUES + '''[' + @KEY_COLUMN + ']'','
				, @KEY_JOIN = @KEY_JOIN + 'AND A.[' + @KEY_COLUMN + '] = B.[' + @KEY_COLUMN + '] '
				, @KEY_VARS = @KEY_VARS + ' @' + @KEY_COLUMN + ', '
				, @KEY_CHECK = @KEY_CHECK + ' COALESCE(@' + @KEY_COLUMN + ', '''') = ' + @KEY_COLUMN + ' AND ' 
				
			IF @COLUMNTYPE IN ('BINARY', 'CHAR', 'NCHAR', 'NVARCHAR', 'VARBINARY', 'VARCHAR')
			BEGIN --> 5
				IF (@COLUMNLENGTH = -1)
					SELECT @KEY_STATEMENT = @KEY_STATEMENT + '(MAX) '
						, @KEY_VARS_DECLARE = @KEY_VARS_DECLARE + '(MAX) '	 	
				ELSE
					SELECT @KEY_STATEMENT = @KEY_STATEMENT + '(' + CAST(@COLUMNLENGTH AS VARCHAR(10)) + ') '
						, @KEY_VARS_DECLARE = @KEY_VARS_DECLARE + '(' + CAST(@COLUMNLENGTH AS VARCHAR(10)) + ') '	
			END --< 5
		
			IF @COLUMNTYPE IN ('DECIMAL', 'NUMERIC')
				SELECT @KEY_STATEMENT = @KEY_STATEMENT + '(' + CAST(@COLUMNPRECISION AS VARCHAR(10)) + ',' + CAST(@COLUMNSCALE AS VARCHAR(10)) + ') '
					, @KEY_VARS_DECLARE = @KEY_VARS_DECLARE + '(' + CAST(@COLUMNPRECISION AS VARCHAR(10)) + ',' + CAST(@COLUMNSCALE AS VARCHAR(10)) + ') '
			IF @COLUMNNULLABLE = 'NO'
				SET @KEY_STATEMENT = @KEY_STATEMENT + ' NOT '	 	
		
			SELECT @KEY_STATEMENT = @KEY_STATEMENT + ' NULL, '
				, @KEY_VARS_DECLARE = @KEY_VARS_DECLARE + ', '	 	
		END --< 4

		FETCH NEXT FROM TABLECOLUMNS
		INTO @KEY_COLUMN, @COLUMNTYPE, @COLUMNLENGTH, @COLUMNNULLABLE, @COLUMNPRECISION, @COLUMNSCALE
	END --< 3

CLOSE TABLECOLUMNS
DEALLOCATE TABLECOLUMNS

SET @KEY_FIRST_VAR = LEFT(@KEY_SELECT, CHARINDEX(',', @KEY_SELECT) - 1) 
SET @KEY_VARS_DECLARE = LEFT(@KEY_VARS_DECLARE, LEN(@KEY_VARS_DECLARE) - 1)
SET @KEY_STATEMENT = LEFT(@KEY_STATEMENT, LEN(@KEY_STATEMENT) - 1)
SET @KEY_JOIN = RIGHT(@KEY_JOIN, LEN(@KEY_JOIN) -3)
SET @KEY_SELECT = LEFT(@KEY_SELECT, LEN(@KEY_SELECT) - 1)
SET @KEY_INSERT = LEFT(@KEY_INSERT, LEN(@KEY_INSERT) - 1)
SET @KEY_VARS = LEFT(@KEY_VARS, LEN(@KEY_VARS) - 1)
SET @KEY_CHECK = LEFT(@KEY_CHECK, LEN(@KEY_CHECK) - 4)

DECLARE TABLE_COLUMNS CURSOR LOCAL FOR
SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = @TABLE_NAME
		AND COLUMN_NAME NOT LIKE 'LastModified%'
EXCEPT
SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS [tc]
	JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE [ku] ON tc.CONSTRAINT_NAME = ku.CONSTRAINT_NAME
	    AND ku.table_name = @TABLE_NAME
WHERE [tc].CONSTRAINT_TYPE IN ('PRIMARY KEY','UNIQUE')

OPEN TABLE_COLUMNS
FETCH NEXT FROM TABLE_COLUMNS INTO @COLUMN_NAME
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @SQL_UPDATE = @SQL_UPDATE + @CRLF 
		+ '		UPDATE A SET ' + @CRLF
		+ '			A.[' + @COLUMN_NAME + '] = B.[' + @COLUMN_NAME + ']' + @CRLF
		+ '			, A.LastModifiedUser = ''' + @USER_NAME + ''' ' + @CRLF
		+ '			, A.LastModifiedDate = B.LastModifiedDate ' + @CRLF
		+ '		FROM ' + @TABLE_NAME + ' A ' + @CRLF
		+ '			INNER JOIN ' + @PARENT_TABLE_NAME + ' B ON ' + @KEY_JOIN + @CRLF
		+ '			INNER JOIN @ROWS D ON ' + REPLACE(@KEY_JOIN, 'B.','D.') + @CRLF
		+ '			LEFT OUTER JOIN ' + @TABLE_NAME + '_audit C ON ' + REPLACE(@KEY_JOIN, 'B.','C.') + @CRLF
		+ '				AND COALESCE(C.FieldName, '''') = ''' + @COLUMN_NAME + ''' ' + @CRLF 
		+ '		WHERE C.' + @KEY_FIRST_VAR + ' IS NULL ' + @CRLF
		+ '			AND COALESCE(A.[' + @COLUMN_NAME + '],'''') <> COALESCE(B.[' + @COLUMN_NAME + '],'''') ' + @CRLF
		+ '			AND COALESCE(B.[' + @COLUMN_NAME + '],'''') <> '''' ' 

SET @SQL_INSERT_COLUMNS = @SQL_INSERT_COLUMNS
	+ '		, ' + @COLUMN_NAME + @CRLF

SET @SQL_INSERT_VALUES = @SQL_INSERT_VALUES
	+ '		, A.' + @COLUMN_NAME + @CRLF

FETCH NEXT FROM TABLE_COLUMNS INTO @COLUMN_NAME
END

SET @SQL_HEADER = 'IF OBJECT_ID (''usp_Etl' + @TABLE_NAME + '_merge'', ''P'') IS NOT NULL DROP PROC usp_' + @TABLE_NAME + '_merge'
BEGIN TRY --> 3
	PRINT @SQL_HEADER
	PRINT (@CRLF + 'GO' + @CRLF + @CRLF)
	IF @PrintOnly = 0
		EXEC (@SQL_HEADER)
END TRY --< 3
BEGIN CATCH --> 3
	EXEC usp_InsertErrorDetails
END CATCH --< 3

SET @SQL_HEADER = 
	' CREATE PROC usp_Etl' + @TABLE_NAME + '_merge ' + @CRLF + @CRLF
	+ '			' + @KEY_VARS_DECLARE + @CRLF
	+ ' AS ' + @CRLF
	+ ' BEGIN ' + @CRLF
	+ '		SET NOCOUNT ON; ' + @CRLF
	+ '		BEGIN TRY ' + @CRLF
	+ '		ALTER TABLE ' + @TABLE_NAME + ' DISABLE TRIGGER ' + @TABLE_NAME + '_changeLog ' + @CRLF
	+ '		DECLARE @ROWS TABLE (' + @KEY_STATEMENT + ') ' + @CRLF
	+ '		IF (ISNULL(CAST(' + REPLACE(REPLACE(@KEY_FIRST_VAR,'[','@'),']','') + ' AS VARCHAR(20)),''0'') <> ''0'')' + @CRLF
	+ '		BEGIN ' + @CRLF
	+ '			INSERT INTO @ROWS ' + ' (' + @KEY_SELECT + ') ' + @CRLF
	+ '			SELECT ' + @KEY_VARS + @CRLF
	+ '		END ' + @CRLF
	+ '		ELSE ' + @CRLF
	+ '		BEGIN ' + @CRLF
	+ '			INSERT INTO @ROWS ' + ' (' + @KEY_SELECT + ') ' + @CRLF
	+ '			SELECT DISTINCT ' + @KEY_SELECT + @CRLF
	+ '			FROM ' + @TABLE_NAME + @CRLF
	+ '		END ' + @CRLF

SET @SQL_INSERT_COLUMNS = RIGHT(@SQL_INSERT_COLUMNS, LEN(@SQL_INSERT_COLUMNS) - 3)
SET @SQL_INSERT_VALUES = RIGHT(@SQL_INSERT_VALUES, LEN(@SQL_INSERT_VALUES) - 3)
SET @KEY_SELECT = REPLACE(@KEY_SELECT,'id, ','')
SET @SQL_FOOTER = @CRLF
	+ '		INSERT INTO ' + @TABLE_NAME + @CRLF
	+ '		(' + @KEY_SELECT + @CRLF
	+ '		, ' + @SQL_INSERT_COLUMNS
	+ '		, LastModifiedUser ' + @CRLF
	+ '		, LastModifiedDate ' + @CRLF
	+ '			)' + @CRLF
	+ '		SELECT ' + @KEY_INSERT + @CRLF
	+ '		, ' + @SQL_INSERT_VALUES
	+ '		, ''' + @USER_NAME + ''' ' + @CRLF
	+ '		, GETUTCDATE() ' + @CRLF
	+ '		FROM ' + @PARENT_TABLE_NAME + ' A ' + @CRLF
	+ '			LEFT OUTER JOIN ' + @TABLE_NAME + ' B ON ' + @KEY_JOIN + @CRLF
	+ '		WHERE B.' + @KEY_FIRST_VAR + ' IS NULL ' + @CRLF
	+ '		ALTER TABLE ' + @TABLE_NAME + ' ENABLE TRIGGER ' + @TABLE_NAME + '_changeLog ' + @CRLF
	+ '		END TRY  ' + @CRLF
    + '		BEGIN CATCH  ' + @CRLF
	+ ' 		Print ''Did not work \r\n'' ' + @CRLF
	+ ' 		EXEC usp_InsertErrorDetails ' + @CRLF
	+ '			ALTER TABLE ' + @TABLE_NAME + ' ENABLE TRIGGER ' + @TABLE_NAME + '_changeLog ' + @CRLF
	+ '		END CATCH ' + @CRLF
	+ ' END ' + @CRLF

SET @SQL = @SQL_HEADER + @SQL_UPDATE + @SQL_FOOTER

DECLARE @Counter INT
SET @Counter = 0
DECLARE @TotalPrints INT
SET @TotalPrints = (LEN(@sql) / 4000) + 1
WHILE @Counter < @TotalPrints 
BEGIN
    PRINT SUBSTRING(@SQL, @Counter * 4000, 4000)
    SET @Counter = @Counter + 1
END

IF @PrintOnly = 0
	EXEC(@SQL)

END